version: "1"
services:
  postgres:
    image: postgres:12.19-alpine3.20
    container_name: postgres-db
    environment:
      POSTGRES_DB: hack
      POSTGRES_USER: "admin"
      POSTGRES_PASSWORD: "admin"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - /home/hack/postgresql/sqlscript:/docker-entrypoint-initdb.d
      - /home/hack/postgresql/data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d hack"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    # networks:
    #   default:
    #     ipv4_address: 172.18.0.2
    ports: 
      - "5432:5432"

  redis:
    image: redis:latest
    container_name: redis-deploy
    restart: always
    volumes:
        - ./redis/data:/data
        - ./redis/redis.conf:/redis/redis.conf
    healthcheck:
        test: [ "CMD", "redis-cli", "ping" ]
        interval: 10s
        timeout: 3s
        retries: 5
        start_period: 1s
    command: redis-server /redis/redis.conf
    # networks:
    #   default:
    #     ipv4_address: 172.18.0.3
    ports:
      - "6379:6379"
  
  minio:
    image: bitnami/minio:latest
    container_name: minio-deploy
    environment:
      MINIO_ROOT_USER: hack
      MINIO_ROOT_PASSWORD: minio123
    volumes:
      - ./minio-persistence:/bitnami/minio/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    # networks:
    #   default:
    #     ipv4_address: 172.18.0.4
    ports:
      - "9000:9000"
      - "9001:9001"

  # yolo:
  #   image: yolo-dock:1.1.1-ubuntu22.04-cuda
  #   build: 
  #     context: .
  #     dockerfile: ./docker/Dockerfile.yolo
  #   container_name: yolo-inference
  #   restart: on-failure
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8080/yolo/health/live"]
  #     interval: 30s
  #     timeout: 20s
  #     retries: 3
  #   environment:
  #     - WEIGHTS_PATH=./yolo/yolov8n.pt
  #     - VIDEO_RESULT_PATH=/opt/project/data/result_video
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - driver: nvidia
  #             count: 1
  #             capabilities: [gpu]
  #   networks:
  #     default:
  #       ipv4_address: 172.18.0.5
  #   ports: 
  #     - "5777:8080"

  api:
    image: backend:0.0.3
    container_name: api-deploy
    build:
      # context: https://github.com/SakhnevichKirill/animals_classification_back.git
      dockerfile: Dockerfiles/DockerfileApi
      # context: .
      # dockerfile: docker/Dockerfile.back
    command: gunicorn --conf api/gunicorn_conf.py -b 0.0.0.0:9080 -k uvicorn.workers.UvicornWorker api.main:app
    environment:
      MINIO_ENDPOINT_URL: http://0.0.0.0:9000
      ACCESS_KEY: 'fcEPzXwRe9tAtUIjco0o'
      SECRET_KEY: 'Y85wp1asb1EwZsXhfCz73kWhuQYoO4le6dhXqRhO'
      DATABASE_URL: postgresql+asyncpg://admin:admin@0.0.0.0/hack
    depends_on:
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      # yolo:
      #   condition: service_healthy
    # networks:
    #    default:
    #      ipv4_address: 172.18.0.6
    ports: 
      - "9080:9080"

  # workwer:
  #   image: worker:0.0.1
  #   container_name: worker-deploy
  #   build:
  #     context: https://github.com/SakhnevichKirill/animals_classification_back.git
  #     dockerfile: Dockerfiles/DockerfileWorker
  #   # restart: unless-stopped
  #   command: arq worker.config.WorkerSettings.WorkerSettings
  #   depends_on:
  #       redis:
  #           condition: service_healthy
    
  # frontend:
  #   image: front:0.1.2
  #   container_name: frontend-deploy
  #   build: https://github.com/HackRealityLab/grozniy-hack-front.git
  #   environment:
  #     MINIO_ENDPOINT_URL: http://172.18.0.4:9000
  #   depends_on:
  #     minio:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     postgres:
  #       condition: service_healthy
  #     yolo:
  #       condition: service_healthy
  #     # api:
  #     #   condition: service_healthy
  #   networks:
  #     default:
  #       ipv4_address: 172.18.0.7
  #   ports: 
  #     - "3000:3000"

# networks:
#   default:
#     driver: bridge
#     ipam:
#      config:
#        - subnet: 172.18.0.0/24
#          gateway: 172.18.0.1